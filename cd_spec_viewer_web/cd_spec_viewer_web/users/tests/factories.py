"""Implements a factory to generate fake users for unit tests

Prepared by COSC 401 as part of the CDSpec Viewer project for Dr. Sherrer

This file and all contributions herin are covered by the GPL 3.0 License 
https://www.gnu.org/licenses/gpl-3.0.html
"""
#Django
from typing import Any, Sequence
from django.contrib.auth import get_user_model
#Third-party
from factory import Faker, post_generation
from factory.django import DjangoModelFactory


class UserFactory(DjangoModelFactory):
# This line defines the UserFactory class, which inherits from DjangoModelFactory.
    username = Faker("user_name")
    email = Faker("email")
    name = Faker("name")
    
# These lines define the attributes of the UserFactory class. The username, email, and name attributes will be generated by the Faker class.
    @post_generation
    def password(self, create: bool, extracted: Sequence[Any], **kwargs):
        password = (
            # This line defines the password() method, which is a decorator that takes the self, create, extracted, and **kwargs arguments.
            extracted
            if extracted
            else Faker(
                "password",
                length=42,
                special_chars=True,
                digits=True,
                upper_case=True,
                lower_case=True,
            ).generate(extra_kwargs={})
        )
        # This line defines the password variable, which is set to the extracted argument if it is not None, otherwise it is set to a string generated by the Faker class.
        self.set_password(password)
        # This line calls the set_password() method on the self object, and passes in the password variable as an argument.
    class Meta:
        model = get_user_model()
        django_get_or_create = ["username"]
# This line defines the Meta inner class, which specifies the model and django_get_or_create options.
